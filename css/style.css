@charset "UTF-8";
/* COLORS:
  Dark Grey: #393939 – Dark designs take a little bit more fore-thought but can provide tons of contrast if used well. 
  Deep Orange: #FF5A09 – With different shades of oranges, there is depth and gradient, without venturing into totally new colors. 
  Light Orange: #ec7f37 – Utilizing illustrative elements, requires a bit of flexibility for the natural lightness and darkness to contour objects. 
  Orange Yellow: #be4f0c – Using on color over on the color wheel can keep the palette looking classy, bold, and restrained.
*/
/* Grid */
/* Font Sizes */
/* based off of 16 px base */
*,
*::after,
*::before {
  /* Allowing us to start clean*/
  margin: 0;
  padding: 0;
  /* Added so that borders and paddings are not added to total width or height to box*/
  box-sizing: inherit;
  /* Tells each element to inherit whatever border box property we set in the body element below (border-box)*/ }

html {
  font-size: 62.5%;
  /* Strategy based on system default of 16px to adjust for rem later - global ~ not typography */ }

body {
  box-sizing: border-box; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* For browser performance, use opacity and transform */
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem);
    /* Move in a little farther to create a nice bouncing effect*/ }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    /* For browser performance, use opacity and transform */
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

body {
  font-family: "Nunito", sans-serif;
  line-height: 1.7;
  color: #777;
  /* Font color */
  padding: 4rem; }

.heading-primary {
  /* Not component because it's more related to typography */
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Avoids possible background shakiness with animations */
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* Remember that '--main' is the MODIFIER */
    display: block;
    /* Good here because take up whole width and create new line elements */
    font-size: 6rem;
    letter-spacing: 2rem;
    animation: moveInLeft 1s ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    letter-spacing: .5rem;
    font-weight: lighter;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 2px;
  /* Cascading effect on the text colors */
  background-image: linear-gradient(to right, #ec7f37, #FF5A09);
  display: inline-block;
  -webkit-background-clip: text;
  color: transparent;
  transition: all .2s;
  /* Hover effect*/ }
  .heading-secondary:hover {
    transform: skewY(1deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 20px rgba(0, 0, 0, 0.2);
    /* Y, X, Blur, Color */ }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: bolder;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 2.5rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 7rem; }

.u-margin-bottom-medium {
  margin-bottom: 3.5rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.btn:link, .btn:visited {
  /* Psuedo class - this link is a state of the btn class (also we don't want visited state to change which is why we put this here)*/
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* Do this if we want to give some height, padding, width, ect... to elements */
  border-radius: 1rem;
  transition: all .2s;
  /* choose which properties to animate !must be on initial state! */
  position: relative;
  /* we do this for the fixed-psuedo-element */
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* x offset, y offset, blur, color(black w/ 20% transparency) */ }
  .btn:hover::after {
    /* we want after elements to have properties when the button is on the hover state */
    transform: scale(1.5);
    /* simply incrase the element */
    opacity: 0;
    /* trick to fade something out with transition property on initial state */ }

.btn:active {
  transform: translateY(-1px);
  /* this is in relation to initial (link) state, not hover state */
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  /* after psuedo element, it's basically a child of parent element */
  content: "";
  display: inline-block;
  /* because button we have is also an inline block */
  height: 100%;
  width: 100%;
  border-radius: 1rem;
  position: absolute;
  /*put behind button, initially goes by header since header is relative */
  top: 0;
  left: 0;
  z-index: -1;
  /* defines elements if there are many on top of one another */
  transition: all .4s;
  /* Animate only on initial state */ }

.btn--animated {
  animation: moveInBottom 0.5s ease-out .75s backwards;
  /* backwards - apply styles BEFORE animation starts */ }

.btn-text:link, .btn-text:visited {
  color: #393939;
  display: inline-block;
  /* do this so we can apply properties like padding, margin, ect... */
  text-decoration: none;
  border-bottom: 1px solid #FF5A09;
  padding: 3px;
  /* okay to use finite units here because they are so small */
  font-size: 1.6rem;
  transition: all .2s; }

.btn-text:hover {
  background-color: #FF5A09;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  /* X Y Blur Color */
  transform: translateY(-2px);
  /* ties in with the transition above */ }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  /* X Y Blur Color */
  transform: translateY(0);
  /* ties in with the transition above */ }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    /* X Y Blue Color, X is almost always 0 for this */
    border-radius: 2px;
    position: absolute;
    /* as soon as this happens, will go to first parent with reference positioning, which we want to be composition (most immediate parent element) */
    z-index: 10;
    /* sets us up for hover effect */
    transition: all .2s;
    /* ties in with hover and z-index */
    /*setup for outline border around photo*/
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem;
      /* moves image a bit above top text on left grid */ }
    .composition__photo--p2 {
      right: 0;
      top: 2rem;
      /* moves image a bit above top text on left grid */ }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem;
      /* moves image a bit above top text on left grid */ }
    .composition__photo:hover {
      transform: scale(1.05);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      /* bigger shadow + darker to simulate getting closer to the screen */
      z-index: 20;
      /* due to parent having z-index of 10, will have higher precedence when hover is activated */
      transform: scale(1.05) translateY(-0.5rem);
      /* subtle edge to animation to make it look a bit cooler */
      /*setup for outline border around photo*/
      outline: 1.5rem solid #FF5A09; }
  .composition:hover .composition__photo:not(:hover) {
    /* when we hover composition, then select composition photo that is NOT hovered */
    transform: scale(0.9);
    /* shrinks the rest of the photos that are not hovered */ }

.row {
  max-width: 114rem;
  /* Standard nowadays to use 1140px ~ ! max is important ! */
  margin: 0 auto;
  /* trick to center block elements inside of another block element */
  /* appends a psuedo element after element which clears the floats */ }
  .row:not(:last-child) {
    /* selects every BUT last child */
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /* At every point, this element should be at 95% of the viewport height */
  background-image: linear-gradient(to right bottom, rgba(57, 57, 57, 0.8), rgba(236, 127, 55, 0.8)), url(../img/mainbackground.jpg);
  background-size: cover;
  /* Whatever the width of the viewport, will try to fit element inside of box*/
  background-position: top;
  /* As screen changes, top of photo is sticky (center works well too) */
  position: relative;
  /* Origin */
  clip-path: polygon(0 0, 100% 0, 100% 80vh, 0 100%);
  /* Specify polygon in which element will still be visibile */ }
  .header__logo-box {
    /* '&' same as '.header' */
    position: absolute;
    top: 3rem;
    /* Measurement will start parent element header, so header needs to be relative*/
    left: 3rem; }
  .header__logo {
    height: 10rem;
    /* Size of logo */ }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    /* used for inline-block */ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -15vh;
  /* moves background grey up to fix white gap difference with header polygon */ }
